// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package cmd

import (
	"ecommerce/api/handler"
	"ecommerce/internal/adapter"
	"ecommerce/internal/configs"
	"ecommerce/internal/database"
	"ecommerce/internal/repository"
	"ecommerce/internal/server"
	"ecommerce/internal/service"
)

// Injectors from wire.go:

//go:generate wire -package=cmd
func initServer() server.IServer {
	config := configs.NewConfig()
	postgresqlDatabase := database.NewPostgresDatabase(config)
	iUserAddressRepository := repository.NewUserAddressRepository(postgresqlDatabase)
	iUserService := service.NewUserService(iUserAddressRepository)
	iUserHandler := handler.NewUserHandler(iUserService)
	iProductRepository := repository.NewProductRepository(postgresqlDatabase)
	iVariantRepository := repository.NewVariantRepository(postgresqlDatabase)
	iExternalVariantRepository := repository.NewExternalVariantRepository(postgresqlDatabase)
	iImageVariantRepository := repository.NewImageVariantRepository(postgresqlDatabase)
	iShopifyAdapter := adapter.NewShopifyAdapter(config)
	iExternalShopRepository := repository.NewExternalShopRepository(postgresqlDatabase)
	iExternalShopShopifyAuthRepository := repository.NewExternalShopShopifyAuthRepository(postgresqlDatabase)
	iShopifyService := service.NewShopifyService(iShopifyAdapter, iProductRepository, iVariantRepository, iExternalShopRepository, iExternalShopShopifyAuthRepository, iExternalVariantRepository)
	v := service.ProvideEcommerceServices(iShopifyService)
	iProductService := service.NewProductService(iProductRepository, iVariantRepository, iExternalVariantRepository, iImageVariantRepository, v)
	iProductHandler := handler.NewProductHandler(iProductService)
	iVariantService := service.NewVariantService(iVariantRepository, v)
	iVariantHandler := handler.NewVariantHandler(iProductService, iVariantService)
	iShopifyHandler := handler.NewShopifyHandler(iShopifyService)
	iExternalShopService := service.NewExternalShopService(iExternalShopRepository, v)
	iExternalShopHandler := handler.NewExternalShopHandler(iExternalShopService)
	iExternalVariantService := service.NewExternalVariantService(iExternalVariantRepository, iVariantRepository)
	iExternalVariantHandler := handler.NewExternalVariantHandler(iExternalVariantService)
	iLivestreamRepository := repository.NewLivestreamRepository(postgresqlDatabase)
	iLivestreamProductRepository := repository.NewLivestreamProductRepository(postgresqlDatabase)
	iLivestreamExternalVariantRepository := repository.NewLivestreamExternalVariantRepository(postgresqlDatabase)
	iLivestreamService := service.NewLivestreamService(iLivestreamRepository, iLivestreamProductRepository, iLivestreamExternalVariantRepository)
	iLivestreamHandler := handler.NewLivestreamHandler(iLivestreamService)
	iLivestreamProductService := service.NewLivestreamProductService(iLivestreamProductRepository, iLivestreamExternalVariantRepository)
	iLivestreamProductHandler := handler.NewLivestreamProductHandler(iLivestreamProductService)
	iCartItemRepository := repository.NewCartItemRepository(postgresqlDatabase)
	iCartItemLivestreamExternalVariantRepository := repository.NewCartItemLivestreamExternalVariantRepository(postgresqlDatabase)
	iCartService := service.NewCartService(iCartItemRepository, iLivestreamExternalVariantRepository, iCartItemLivestreamExternalVariantRepository)
	iCartHandler := handler.NewCartHandler(iCartService)
	iOrderRepository := repository.NewOrderRepository(postgresqlDatabase)
	iOrderItemRepository := repository.NewOrderItemRepository(postgresqlDatabase)
	iOrderItemLivestreamExternalVariantRepository := repository.NewOrderItemLivestreamExternalVariantRepository(postgresqlDatabase)
	iExternalOrderRepository := repository.NewExternalOrderRepository(postgresqlDatabase)
	iOrderService := service.NewOrderService(iOrderRepository, iOrderItemRepository, iOrderItemLivestreamExternalVariantRepository, iCartItemRepository, iExternalOrderRepository, v)
	iOrderHandler := handler.NewOrderHandler(iOrderService)
	handlers := handler.ProvideHandlers(iUserHandler, iProductHandler, iVariantHandler, iShopifyHandler, iExternalShopHandler, iExternalVariantHandler, iLivestreamHandler, iLivestreamProductHandler, iCartHandler, iOrderHandler)
	iServer := server.NewServer(config, handlers)
	return iServer
}
