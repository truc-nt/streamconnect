// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package cmd

import (
	"ecommerce/api/handlers"
	"ecommerce/internal/adapters"
	"ecommerce/internal/configs"
	"ecommerce/internal/database"
	"ecommerce/internal/repositories"
	"ecommerce/internal/server"
	"ecommerce/internal/services"
)

// Injectors from wire.go:

//go:generate wire -package=cmd
func initServer() server.IServer {
	config := configs.NewConfig()
	iShopifyAdapter := adapters.NewShopifyAdapter(config)
	postgresqlDatabase := database.NewPostgresDatabase(config)
	iExternalShopRepository := repositories.NewExternalShopRepository(postgresqlDatabase)
	iShopifyExternalShopAuthRepository := repositories.NewShopifyExternalShopAuthRepository(postgresqlDatabase)
	iShopifyService := services.NewShopifyService(iShopifyAdapter, config, iExternalShopRepository, iShopifyExternalShopAuthRepository)
	iShopifyHandler := handlers.NewShopifyHandler(iShopifyService)
	v := services.ProvideEcommerceServices(iShopifyService)
	iExternalShopService := services.NewExternalShopService(iExternalShopRepository, config, v)
	iExternalShopHandler := handlers.NewExternalShopHandler(iExternalShopService)
	handlersHandlers := handlers.NewHandlers(iShopifyHandler, iExternalShopHandler)
	iExternalShopAuthService := services.NewExternalShopAuthService(iShopifyExternalShopAuthRepository, config)
	servicesServices := services.NewServices(iShopifyService, iExternalShopService, iExternalShopAuthService)
	iServer := server.NewServer(config, handlersHandlers, servicesServices, postgresqlDatabase)
	return iServer
}
