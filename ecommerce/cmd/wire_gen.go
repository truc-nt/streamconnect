// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package cmd

import (
	"ecommerce/api/handler"
	"ecommerce/internal/adapter"
	"ecommerce/internal/configs"
	"ecommerce/internal/database"
	"ecommerce/internal/repository"
	"ecommerce/internal/server"
	"ecommerce/internal/service"
)

// Injectors from wire.go:

//go:generate wire -package=cmd
func initServer() server.IServer {
	config := configs.NewConfig()
	postgresqlDatabase := database.NewPostgresDatabase(config)
	iProductRepository := repository.NewProductRepository(postgresqlDatabase)
	iShopifyAdapter := adapter.NewShopifyAdapter(config)
	iVariantRepository := repository.NewVariantRepository(postgresqlDatabase)
	iExternalShopRepository := repository.NewExternalShopRepository(postgresqlDatabase)
	iExternalShopShopifyAuthRepository := repository.NewExternalShopShopifyAuthRepository(postgresqlDatabase)
	iExternalProductShopifyRepository := repository.NewExternalProductShopifyRepository(postgresqlDatabase)
	iShopifyService := service.NewShopifyService(iShopifyAdapter, iProductRepository, iVariantRepository, iExternalShopRepository, iExternalShopShopifyAuthRepository, iExternalProductShopifyRepository)
	v := service.ProvideEcommerceServices(iShopifyService)
	iProductService := service.NewProductService(iProductRepository, v)
	iProductHandler := handler.NewProductHandler(iProductService)
	iShopifyHandler := handler.NewShopifyHandler(iShopifyService)
	iExternalShopService := service.NewExternalShopService(iExternalShopRepository, v)
	iExternalShopHandler := handler.NewExternalShopHandler(iExternalShopService)
	iExternalProductService := service.NewExternalProductService(v, iExternalShopService)
	iExternalProductHandler := handler.NewExternalProductHandler(iExternalProductService)
	handlers := handler.ProvideHandlers(iProductHandler, iShopifyHandler, iExternalShopHandler, iExternalProductHandler)
	iServer := server.NewServer(config, handlers)
	return iServer
}
