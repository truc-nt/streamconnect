//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Product = newProductTable("public", "product", "")

type productTable struct {
	postgres.Table

	// Columns
	IDProduct    postgres.ColumnInteger
	FkShop       postgres.ColumnInteger
	Name         postgres.ColumnString
	Description  postgres.ColumnString
	Status       postgres.ColumnString
	Stock        postgres.ColumnInteger
	OptionTitles postgres.ColumnString
	CreatedAt    postgres.ColumnTimestamp
	UpdatedAt    postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ProductTable struct {
	productTable

	EXCLUDED productTable
}

// AS creates new ProductTable with assigned alias
func (a ProductTable) AS(alias string) *ProductTable {
	return newProductTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ProductTable with assigned schema name
func (a ProductTable) FromSchema(schemaName string) *ProductTable {
	return newProductTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ProductTable with assigned table prefix
func (a ProductTable) WithPrefix(prefix string) *ProductTable {
	return newProductTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ProductTable with assigned table suffix
func (a ProductTable) WithSuffix(suffix string) *ProductTable {
	return newProductTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newProductTable(schemaName, tableName, alias string) *ProductTable {
	return &ProductTable{
		productTable: newProductTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newProductTableImpl("", "excluded", ""),
	}
}

func newProductTableImpl(schemaName, tableName, alias string) productTable {
	var (
		IDProductColumn    = postgres.IntegerColumn("id_product")
		FkShopColumn       = postgres.IntegerColumn("fk_shop")
		NameColumn         = postgres.StringColumn("name")
		DescriptionColumn  = postgres.StringColumn("description")
		StatusColumn       = postgres.StringColumn("status")
		StockColumn        = postgres.IntegerColumn("stock")
		OptionTitlesColumn = postgres.StringColumn("option_titles")
		CreatedAtColumn    = postgres.TimestampColumn("created_at")
		UpdatedAtColumn    = postgres.TimestampColumn("updated_at")
		allColumns         = postgres.ColumnList{IDProductColumn, FkShopColumn, NameColumn, DescriptionColumn, StatusColumn, StockColumn, OptionTitlesColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns     = postgres.ColumnList{FkShopColumn, NameColumn, DescriptionColumn, StatusColumn, StockColumn, OptionTitlesColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return productTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		IDProduct:    IDProductColumn,
		FkShop:       FkShopColumn,
		Name:         NameColumn,
		Description:  DescriptionColumn,
		Status:       StatusColumn,
		Stock:        StockColumn,
		OptionTitles: OptionTitlesColumn,
		CreatedAt:    CreatedAtColumn,
		UpdatedAt:    UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
