//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Variant = newVariantTable("public", "variant", "")

type variantTable struct {
	postgres.Table

	// Columns
	IDVariant postgres.ColumnInteger
	FkProduct postgres.ColumnInteger
	Sku       postgres.ColumnString
	Status    postgres.ColumnString
	Option    postgres.ColumnString
	CreatedAt postgres.ColumnTimestamp
	UpdatedAt postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type VariantTable struct {
	variantTable

	EXCLUDED variantTable
}

// AS creates new VariantTable with assigned alias
func (a VariantTable) AS(alias string) *VariantTable {
	return newVariantTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new VariantTable with assigned schema name
func (a VariantTable) FromSchema(schemaName string) *VariantTable {
	return newVariantTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new VariantTable with assigned table prefix
func (a VariantTable) WithPrefix(prefix string) *VariantTable {
	return newVariantTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new VariantTable with assigned table suffix
func (a VariantTable) WithSuffix(suffix string) *VariantTable {
	return newVariantTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newVariantTable(schemaName, tableName, alias string) *VariantTable {
	return &VariantTable{
		variantTable: newVariantTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newVariantTableImpl("", "excluded", ""),
	}
}

func newVariantTableImpl(schemaName, tableName, alias string) variantTable {
	var (
		IDVariantColumn = postgres.IntegerColumn("id_variant")
		FkProductColumn = postgres.IntegerColumn("fk_product")
		SkuColumn       = postgres.StringColumn("sku")
		StatusColumn    = postgres.StringColumn("status")
		OptionColumn    = postgres.StringColumn("option")
		CreatedAtColumn = postgres.TimestampColumn("created_at")
		UpdatedAtColumn = postgres.TimestampColumn("updated_at")
		allColumns      = postgres.ColumnList{IDVariantColumn, FkProductColumn, SkuColumn, StatusColumn, OptionColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns  = postgres.ColumnList{FkProductColumn, SkuColumn, StatusColumn, OptionColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return variantTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		IDVariant: IDVariantColumn,
		FkProduct: FkProductColumn,
		Sku:       SkuColumn,
		Status:    StatusColumn,
		Option:    OptionColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
