//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var AccountRoles = newAccountRolesTable("public", "account_roles", "")

type accountRolesTable struct {
	postgres.Table

	// Columns
	UserRoleID postgres.ColumnInteger
	Username   postgres.ColumnString
	Role       postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AccountRolesTable struct {
	accountRolesTable

	EXCLUDED accountRolesTable
}

// AS creates new AccountRolesTable with assigned alias
func (a AccountRolesTable) AS(alias string) *AccountRolesTable {
	return newAccountRolesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AccountRolesTable with assigned schema name
func (a AccountRolesTable) FromSchema(schemaName string) *AccountRolesTable {
	return newAccountRolesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AccountRolesTable with assigned table prefix
func (a AccountRolesTable) WithPrefix(prefix string) *AccountRolesTable {
	return newAccountRolesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AccountRolesTable with assigned table suffix
func (a AccountRolesTable) WithSuffix(suffix string) *AccountRolesTable {
	return newAccountRolesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAccountRolesTable(schemaName, tableName, alias string) *AccountRolesTable {
	return &AccountRolesTable{
		accountRolesTable: newAccountRolesTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newAccountRolesTableImpl("", "excluded", ""),
	}
}

func newAccountRolesTableImpl(schemaName, tableName, alias string) accountRolesTable {
	var (
		UserRoleIDColumn = postgres.IntegerColumn("user_role_id")
		UsernameColumn   = postgres.StringColumn("username")
		RoleColumn       = postgres.StringColumn("role")
		allColumns       = postgres.ColumnList{UserRoleIDColumn, UsernameColumn, RoleColumn}
		mutableColumns   = postgres.ColumnList{UsernameColumn, RoleColumn}
	)

	return accountRolesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserRoleID: UserRoleIDColumn,
		Username:   UsernameColumn,
		Role:       RoleColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
