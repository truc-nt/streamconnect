//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ExternalOrder = newExternalOrderTable("public", "external_order", "")

type externalOrderTable struct {
	postgres.Table

	// Columns
	IDExternalOrder        postgres.ColumnInteger
	FkOrder                postgres.ColumnInteger
	ExternalOrderIDMapping postgres.ColumnString
	CreatedAt              postgres.ColumnTimestamp
	UpdatedAt              postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ExternalOrderTable struct {
	externalOrderTable

	EXCLUDED externalOrderTable
}

// AS creates new ExternalOrderTable with assigned alias
func (a ExternalOrderTable) AS(alias string) *ExternalOrderTable {
	return newExternalOrderTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ExternalOrderTable with assigned schema name
func (a ExternalOrderTable) FromSchema(schemaName string) *ExternalOrderTable {
	return newExternalOrderTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ExternalOrderTable with assigned table prefix
func (a ExternalOrderTable) WithPrefix(prefix string) *ExternalOrderTable {
	return newExternalOrderTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ExternalOrderTable with assigned table suffix
func (a ExternalOrderTable) WithSuffix(suffix string) *ExternalOrderTable {
	return newExternalOrderTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newExternalOrderTable(schemaName, tableName, alias string) *ExternalOrderTable {
	return &ExternalOrderTable{
		externalOrderTable: newExternalOrderTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newExternalOrderTableImpl("", "excluded", ""),
	}
}

func newExternalOrderTableImpl(schemaName, tableName, alias string) externalOrderTable {
	var (
		IDExternalOrderColumn        = postgres.IntegerColumn("id_external_order")
		FkOrderColumn                = postgres.IntegerColumn("fk_order")
		ExternalOrderIDMappingColumn = postgres.StringColumn("external_order_id_mapping")
		CreatedAtColumn              = postgres.TimestampColumn("created_at")
		UpdatedAtColumn              = postgres.TimestampColumn("updated_at")
		allColumns                   = postgres.ColumnList{IDExternalOrderColumn, FkOrderColumn, ExternalOrderIDMappingColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns               = postgres.ColumnList{FkOrderColumn, ExternalOrderIDMappingColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return externalOrderTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		IDExternalOrder:        IDExternalOrderColumn,
		FkOrder:                FkOrderColumn,
		ExternalOrderIDMapping: ExternalOrderIDMappingColumn,
		CreatedAt:              CreatedAtColumn,
		UpdatedAt:              UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
