//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ExtOrder = newExtOrderTable("public", "ext_order", "")

type extOrderTable struct {
	postgres.Table

	// Columns
	IDExtOrder          postgres.ColumnInteger
	FkOrder             postgres.ColumnInteger
	FkExtShop           postgres.ColumnInteger
	ExtOrderIDMapping   postgres.ColumnString
	ShippingFee         postgres.ColumnFloat
	ShippingFeeDiscount postgres.ColumnFloat
	InternalDiscount    postgres.ColumnFloat
	ExternalDiscount    postgres.ColumnFloat
	CreatedAt           postgres.ColumnTimestamp
	UpdatedAt           postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ExtOrderTable struct {
	extOrderTable

	EXCLUDED extOrderTable
}

// AS creates new ExtOrderTable with assigned alias
func (a ExtOrderTable) AS(alias string) *ExtOrderTable {
	return newExtOrderTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ExtOrderTable with assigned schema name
func (a ExtOrderTable) FromSchema(schemaName string) *ExtOrderTable {
	return newExtOrderTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ExtOrderTable with assigned table prefix
func (a ExtOrderTable) WithPrefix(prefix string) *ExtOrderTable {
	return newExtOrderTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ExtOrderTable with assigned table suffix
func (a ExtOrderTable) WithSuffix(suffix string) *ExtOrderTable {
	return newExtOrderTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newExtOrderTable(schemaName, tableName, alias string) *ExtOrderTable {
	return &ExtOrderTable{
		extOrderTable: newExtOrderTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newExtOrderTableImpl("", "excluded", ""),
	}
}

func newExtOrderTableImpl(schemaName, tableName, alias string) extOrderTable {
	var (
		IDExtOrderColumn          = postgres.IntegerColumn("id_ext_order")
		FkOrderColumn             = postgres.IntegerColumn("fk_order")
		FkExtShopColumn           = postgres.IntegerColumn("fk_ext_shop")
		ExtOrderIDMappingColumn   = postgres.StringColumn("ext_order_id_mapping")
		ShippingFeeColumn         = postgres.FloatColumn("shipping_fee")
		ShippingFeeDiscountColumn = postgres.FloatColumn("shipping_fee_discount")
		InternalDiscountColumn    = postgres.FloatColumn("internal_discount")
		ExternalDiscountColumn    = postgres.FloatColumn("external_discount")
		CreatedAtColumn           = postgres.TimestampColumn("created_at")
		UpdatedAtColumn           = postgres.TimestampColumn("updated_at")
		allColumns                = postgres.ColumnList{IDExtOrderColumn, FkOrderColumn, FkExtShopColumn, ExtOrderIDMappingColumn, ShippingFeeColumn, ShippingFeeDiscountColumn, InternalDiscountColumn, ExternalDiscountColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns            = postgres.ColumnList{FkOrderColumn, FkExtShopColumn, ExtOrderIDMappingColumn, ShippingFeeColumn, ShippingFeeDiscountColumn, InternalDiscountColumn, ExternalDiscountColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return extOrderTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		IDExtOrder:          IDExtOrderColumn,
		FkOrder:             FkOrderColumn,
		FkExtShop:           FkExtShopColumn,
		ExtOrderIDMapping:   ExtOrderIDMappingColumn,
		ShippingFee:         ShippingFeeColumn,
		ShippingFeeDiscount: ShippingFeeDiscountColumn,
		InternalDiscount:    InternalDiscountColumn,
		ExternalDiscount:    ExternalDiscountColumn,
		CreatedAt:           CreatedAtColumn,
		UpdatedAt:           UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
