//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ACLRole = newACLRoleTable("public", "acl_role", "")

type aCLRoleTable struct {
	postgres.Table

	// Columns
	IDACLRole postgres.ColumnInteger
	Name      postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ACLRoleTable struct {
	aCLRoleTable

	EXCLUDED aCLRoleTable
}

// AS creates new ACLRoleTable with assigned alias
func (a ACLRoleTable) AS(alias string) *ACLRoleTable {
	return newACLRoleTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ACLRoleTable with assigned schema name
func (a ACLRoleTable) FromSchema(schemaName string) *ACLRoleTable {
	return newACLRoleTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ACLRoleTable with assigned table prefix
func (a ACLRoleTable) WithPrefix(prefix string) *ACLRoleTable {
	return newACLRoleTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ACLRoleTable with assigned table suffix
func (a ACLRoleTable) WithSuffix(suffix string) *ACLRoleTable {
	return newACLRoleTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newACLRoleTable(schemaName, tableName, alias string) *ACLRoleTable {
	return &ACLRoleTable{
		aCLRoleTable: newACLRoleTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newACLRoleTableImpl("", "excluded", ""),
	}
}

func newACLRoleTableImpl(schemaName, tableName, alias string) aCLRoleTable {
	var (
		IDACLRoleColumn = postgres.IntegerColumn("id_acl_role")
		NameColumn      = postgres.StringColumn("name")
		allColumns      = postgres.ColumnList{IDACLRoleColumn, NameColumn}
		mutableColumns  = postgres.ColumnList{NameColumn}
	)

	return aCLRoleTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		IDACLRole: IDACLRoleColumn,
		Name:      NameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
