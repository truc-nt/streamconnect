//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var User = newUserTable("public", "user", "")

type userTable struct {
	postgres.Table

	// Columns
	IDUser              postgres.ColumnInteger
	Username            postgres.ColumnString
	HashedPassword      postgres.ColumnString
	FullName            postgres.ColumnString
	Email               postgres.ColumnString
	IsEnabled           postgres.ColumnBool
	CreatedDateTime     postgres.ColumnTimestamp
	LastUpdatedDateTime postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UserTable struct {
	userTable

	EXCLUDED userTable
}

// AS creates new UserTable with assigned alias
func (a UserTable) AS(alias string) *UserTable {
	return newUserTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserTable with assigned schema name
func (a UserTable) FromSchema(schemaName string) *UserTable {
	return newUserTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserTable with assigned table prefix
func (a UserTable) WithPrefix(prefix string) *UserTable {
	return newUserTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserTable with assigned table suffix
func (a UserTable) WithSuffix(suffix string) *UserTable {
	return newUserTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserTable(schemaName, tableName, alias string) *UserTable {
	return &UserTable{
		userTable: newUserTableImpl(schemaName, tableName, alias),
		EXCLUDED:  newUserTableImpl("", "excluded", ""),
	}
}

func newUserTableImpl(schemaName, tableName, alias string) userTable {
	var (
		IDUserColumn              = postgres.IntegerColumn("id_user")
		UsernameColumn            = postgres.StringColumn("username")
		HashedPasswordColumn      = postgres.StringColumn("hashed_password")
		FullNameColumn            = postgres.StringColumn("full_name")
		EmailColumn               = postgres.StringColumn("email")
		IsEnabledColumn           = postgres.BoolColumn("is_enabled")
		CreatedDateTimeColumn     = postgres.TimestampColumn("created_date_time")
		LastUpdatedDateTimeColumn = postgres.TimestampColumn("last_updated_date_time")
		allColumns                = postgres.ColumnList{IDUserColumn, UsernameColumn, HashedPasswordColumn, FullNameColumn, EmailColumn, IsEnabledColumn, CreatedDateTimeColumn, LastUpdatedDateTimeColumn}
		mutableColumns            = postgres.ColumnList{UsernameColumn, HashedPasswordColumn, FullNameColumn, EmailColumn, IsEnabledColumn, CreatedDateTimeColumn, LastUpdatedDateTimeColumn}
	)

	return userTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		IDUser:              IDUserColumn,
		Username:            UsernameColumn,
		HashedPassword:      HashedPasswordColumn,
		FullName:            FullNameColumn,
		Email:               EmailColumn,
		IsEnabled:           IsEnabledColumn,
		CreatedDateTime:     CreatedDateTimeColumn,
		LastUpdatedDateTime: LastUpdatedDateTimeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
