//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var PaymentMethod = newPaymentMethodTable("public", "payment_method", "")

type paymentMethodTable struct {
	postgres.Table

	// Columns
	IDPaymentMethod postgres.ColumnInteger
	Name            postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PaymentMethodTable struct {
	paymentMethodTable

	EXCLUDED paymentMethodTable
}

// AS creates new PaymentMethodTable with assigned alias
func (a PaymentMethodTable) AS(alias string) *PaymentMethodTable {
	return newPaymentMethodTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PaymentMethodTable with assigned schema name
func (a PaymentMethodTable) FromSchema(schemaName string) *PaymentMethodTable {
	return newPaymentMethodTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PaymentMethodTable with assigned table prefix
func (a PaymentMethodTable) WithPrefix(prefix string) *PaymentMethodTable {
	return newPaymentMethodTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PaymentMethodTable with assigned table suffix
func (a PaymentMethodTable) WithSuffix(suffix string) *PaymentMethodTable {
	return newPaymentMethodTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPaymentMethodTable(schemaName, tableName, alias string) *PaymentMethodTable {
	return &PaymentMethodTable{
		paymentMethodTable: newPaymentMethodTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newPaymentMethodTableImpl("", "excluded", ""),
	}
}

func newPaymentMethodTableImpl(schemaName, tableName, alias string) paymentMethodTable {
	var (
		IDPaymentMethodColumn = postgres.IntegerColumn("id_payment_method")
		NameColumn            = postgres.StringColumn("name")
		allColumns            = postgres.ColumnList{IDPaymentMethodColumn, NameColumn}
		mutableColumns        = postgres.ColumnList{NameColumn}
	)

	return paymentMethodTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		IDPaymentMethod: IDPaymentMethodColumn,
		Name:            NameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
