//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var LivestreamSchedule = newLivestreamScheduleTable("public", "livestream_schedule", "")

type livestreamScheduleTable struct {
	postgres.Table

	// Columns
	IDLivestreamSchedule postgres.ColumnInteger
	FkLivestream         postgres.ColumnInteger
	StartTime            postgres.ColumnTimestamp
	EndTime              postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type LivestreamScheduleTable struct {
	livestreamScheduleTable

	EXCLUDED livestreamScheduleTable
}

// AS creates new LivestreamScheduleTable with assigned alias
func (a LivestreamScheduleTable) AS(alias string) *LivestreamScheduleTable {
	return newLivestreamScheduleTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new LivestreamScheduleTable with assigned schema name
func (a LivestreamScheduleTable) FromSchema(schemaName string) *LivestreamScheduleTable {
	return newLivestreamScheduleTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new LivestreamScheduleTable with assigned table prefix
func (a LivestreamScheduleTable) WithPrefix(prefix string) *LivestreamScheduleTable {
	return newLivestreamScheduleTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new LivestreamScheduleTable with assigned table suffix
func (a LivestreamScheduleTable) WithSuffix(suffix string) *LivestreamScheduleTable {
	return newLivestreamScheduleTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newLivestreamScheduleTable(schemaName, tableName, alias string) *LivestreamScheduleTable {
	return &LivestreamScheduleTable{
		livestreamScheduleTable: newLivestreamScheduleTableImpl(schemaName, tableName, alias),
		EXCLUDED:                newLivestreamScheduleTableImpl("", "excluded", ""),
	}
}

func newLivestreamScheduleTableImpl(schemaName, tableName, alias string) livestreamScheduleTable {
	var (
		IDLivestreamScheduleColumn = postgres.IntegerColumn("id_livestream_schedule")
		FkLivestreamColumn         = postgres.IntegerColumn("fk_livestream")
		StartTimeColumn            = postgres.TimestampColumn("start_time")
		EndTimeColumn              = postgres.TimestampColumn("end_time")
		allColumns                 = postgres.ColumnList{IDLivestreamScheduleColumn, FkLivestreamColumn, StartTimeColumn, EndTimeColumn}
		mutableColumns             = postgres.ColumnList{FkLivestreamColumn, StartTimeColumn, EndTimeColumn}
	)

	return livestreamScheduleTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		IDLivestreamSchedule: IDLivestreamScheduleColumn,
		FkLivestream:         FkLivestreamColumn,
		StartTime:            StartTimeColumn,
		EndTime:              EndTimeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
