//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ShippingMethod = newShippingMethodTable("public", "shipping_method", "")

type shippingMethodTable struct {
	postgres.Table

	// Columns
	IDShippingMethod postgres.ColumnInteger
	Name             postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ShippingMethodTable struct {
	shippingMethodTable

	EXCLUDED shippingMethodTable
}

// AS creates new ShippingMethodTable with assigned alias
func (a ShippingMethodTable) AS(alias string) *ShippingMethodTable {
	return newShippingMethodTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ShippingMethodTable with assigned schema name
func (a ShippingMethodTable) FromSchema(schemaName string) *ShippingMethodTable {
	return newShippingMethodTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ShippingMethodTable with assigned table prefix
func (a ShippingMethodTable) WithPrefix(prefix string) *ShippingMethodTable {
	return newShippingMethodTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ShippingMethodTable with assigned table suffix
func (a ShippingMethodTable) WithSuffix(suffix string) *ShippingMethodTable {
	return newShippingMethodTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newShippingMethodTable(schemaName, tableName, alias string) *ShippingMethodTable {
	return &ShippingMethodTable{
		shippingMethodTable: newShippingMethodTableImpl(schemaName, tableName, alias),
		EXCLUDED:            newShippingMethodTableImpl("", "excluded", ""),
	}
}

func newShippingMethodTableImpl(schemaName, tableName, alias string) shippingMethodTable {
	var (
		IDShippingMethodColumn = postgres.IntegerColumn("id_shipping_method")
		NameColumn             = postgres.StringColumn("name")
		allColumns             = postgres.ColumnList{IDShippingMethodColumn, NameColumn}
		mutableColumns         = postgres.ColumnList{NameColumn}
	)

	return shippingMethodTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		IDShippingMethod: IDShippingMethodColumn,
		Name:             NameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
