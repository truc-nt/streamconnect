//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var VoucherUser = newVoucherUserTable("public", "voucher_user", "")

type voucherUserTable struct {
	postgres.Table

	// Columns
	IDVoucherUser postgres.ColumnInteger
	FkVoucher     postgres.ColumnInteger
	FkUser        postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type VoucherUserTable struct {
	voucherUserTable

	EXCLUDED voucherUserTable
}

// AS creates new VoucherUserTable with assigned alias
func (a VoucherUserTable) AS(alias string) *VoucherUserTable {
	return newVoucherUserTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new VoucherUserTable with assigned schema name
func (a VoucherUserTable) FromSchema(schemaName string) *VoucherUserTable {
	return newVoucherUserTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new VoucherUserTable with assigned table prefix
func (a VoucherUserTable) WithPrefix(prefix string) *VoucherUserTable {
	return newVoucherUserTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new VoucherUserTable with assigned table suffix
func (a VoucherUserTable) WithSuffix(suffix string) *VoucherUserTable {
	return newVoucherUserTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newVoucherUserTable(schemaName, tableName, alias string) *VoucherUserTable {
	return &VoucherUserTable{
		voucherUserTable: newVoucherUserTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newVoucherUserTableImpl("", "excluded", ""),
	}
}

func newVoucherUserTableImpl(schemaName, tableName, alias string) voucherUserTable {
	var (
		IDVoucherUserColumn = postgres.IntegerColumn("id_voucher_user")
		FkVoucherColumn     = postgres.IntegerColumn("fk_voucher")
		FkUserColumn        = postgres.IntegerColumn("fk_user")
		allColumns          = postgres.ColumnList{IDVoucherUserColumn, FkVoucherColumn, FkUserColumn}
		mutableColumns      = postgres.ColumnList{FkVoucherColumn, FkUserColumn}
	)

	return voucherUserTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		IDVoucherUser: IDVoucherUserColumn,
		FkVoucher:     FkVoucherColumn,
		FkUser:        FkUserColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
