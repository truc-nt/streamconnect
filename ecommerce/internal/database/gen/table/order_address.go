//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var OrderAddress = newOrderAddressTable("public", "order_address", "")

type orderAddressTable struct {
	postgres.Table

	// Columns
	IDOrderAddress postgres.ColumnInteger
	FkOrder        postgres.ColumnInteger
	Name           postgres.ColumnString
	Phone          postgres.ColumnString
	Address        postgres.ColumnString
	City           postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type OrderAddressTable struct {
	orderAddressTable

	EXCLUDED orderAddressTable
}

// AS creates new OrderAddressTable with assigned alias
func (a OrderAddressTable) AS(alias string) *OrderAddressTable {
	return newOrderAddressTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new OrderAddressTable with assigned schema name
func (a OrderAddressTable) FromSchema(schemaName string) *OrderAddressTable {
	return newOrderAddressTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new OrderAddressTable with assigned table prefix
func (a OrderAddressTable) WithPrefix(prefix string) *OrderAddressTable {
	return newOrderAddressTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new OrderAddressTable with assigned table suffix
func (a OrderAddressTable) WithSuffix(suffix string) *OrderAddressTable {
	return newOrderAddressTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newOrderAddressTable(schemaName, tableName, alias string) *OrderAddressTable {
	return &OrderAddressTable{
		orderAddressTable: newOrderAddressTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newOrderAddressTableImpl("", "excluded", ""),
	}
}

func newOrderAddressTableImpl(schemaName, tableName, alias string) orderAddressTable {
	var (
		IDOrderAddressColumn = postgres.IntegerColumn("id_order_address")
		FkOrderColumn        = postgres.IntegerColumn("fk_order")
		NameColumn           = postgres.StringColumn("name")
		PhoneColumn          = postgres.StringColumn("phone")
		AddressColumn        = postgres.StringColumn("address")
		CityColumn           = postgres.StringColumn("city")
		allColumns           = postgres.ColumnList{IDOrderAddressColumn, FkOrderColumn, NameColumn, PhoneColumn, AddressColumn, CityColumn}
		mutableColumns       = postgres.ColumnList{FkOrderColumn, NameColumn, PhoneColumn, AddressColumn, CityColumn}
	)

	return orderAddressTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		IDOrderAddress: IDOrderAddressColumn,
		FkOrder:        FkOrderColumn,
		Name:           NameColumn,
		Phone:          PhoneColumn,
		Address:        AddressColumn,
		City:           CityColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
