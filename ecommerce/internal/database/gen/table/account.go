//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Account = newAccountTable("public", "account", "")

type accountTable struct {
	postgres.Table

	// Columns
	ID                  postgres.ColumnInteger
	Username            postgres.ColumnString
	HashedPassword      postgres.ColumnString
	FullName            postgres.ColumnString
	Email               postgres.ColumnString
	IsEnabled           postgres.ColumnBool
	CreatedDateTime     postgres.ColumnTimestamp
	LastUpdatedDateTime postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AccountTable struct {
	accountTable

	EXCLUDED accountTable
}

// AS creates new AccountTable with assigned alias
func (a AccountTable) AS(alias string) *AccountTable {
	return newAccountTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AccountTable with assigned schema name
func (a AccountTable) FromSchema(schemaName string) *AccountTable {
	return newAccountTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AccountTable with assigned table prefix
func (a AccountTable) WithPrefix(prefix string) *AccountTable {
	return newAccountTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AccountTable with assigned table suffix
func (a AccountTable) WithSuffix(suffix string) *AccountTable {
	return newAccountTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAccountTable(schemaName, tableName, alias string) *AccountTable {
	return &AccountTable{
		accountTable: newAccountTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newAccountTableImpl("", "excluded", ""),
	}
}

func newAccountTableImpl(schemaName, tableName, alias string) accountTable {
	var (
		IDColumn                  = postgres.IntegerColumn("id")
		UsernameColumn            = postgres.StringColumn("username")
		HashedPasswordColumn      = postgres.StringColumn("hashed_password")
		FullNameColumn            = postgres.StringColumn("full_name")
		EmailColumn               = postgres.StringColumn("email")
		IsEnabledColumn           = postgres.BoolColumn("is_enabled")
		CreatedDateTimeColumn     = postgres.TimestampColumn("created_date_time")
		LastUpdatedDateTimeColumn = postgres.TimestampColumn("last_updated_date_time")
		allColumns                = postgres.ColumnList{IDColumn, UsernameColumn, HashedPasswordColumn, FullNameColumn, EmailColumn, IsEnabledColumn, CreatedDateTimeColumn, LastUpdatedDateTimeColumn}
		mutableColumns            = postgres.ColumnList{UsernameColumn, HashedPasswordColumn, FullNameColumn, EmailColumn, IsEnabledColumn, CreatedDateTimeColumn, LastUpdatedDateTimeColumn}
	)

	return accountTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                  IDColumn,
		Username:            UsernameColumn,
		HashedPassword:      HashedPasswordColumn,
		FullName:            FullNameColumn,
		Email:               EmailColumn,
		IsEnabled:           IsEnabledColumn,
		CreatedDateTime:     CreatedDateTimeColumn,
		LastUpdatedDateTime: LastUpdatedDateTimeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
