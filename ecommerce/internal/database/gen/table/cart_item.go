//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var CartItem = newCartItemTable("public", "cart_item", "")

type cartItemTable struct {
	postgres.Table

	// Columns
	IDCartItem        postgres.ColumnInteger
	FkCart            postgres.ColumnInteger
	FkExternalVariant postgres.ColumnInteger
	Quantity          postgres.ColumnInteger
	Status            postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CartItemTable struct {
	cartItemTable

	EXCLUDED cartItemTable
}

// AS creates new CartItemTable with assigned alias
func (a CartItemTable) AS(alias string) *CartItemTable {
	return newCartItemTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CartItemTable with assigned schema name
func (a CartItemTable) FromSchema(schemaName string) *CartItemTable {
	return newCartItemTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CartItemTable with assigned table prefix
func (a CartItemTable) WithPrefix(prefix string) *CartItemTable {
	return newCartItemTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CartItemTable with assigned table suffix
func (a CartItemTable) WithSuffix(suffix string) *CartItemTable {
	return newCartItemTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCartItemTable(schemaName, tableName, alias string) *CartItemTable {
	return &CartItemTable{
		cartItemTable: newCartItemTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newCartItemTableImpl("", "excluded", ""),
	}
}

func newCartItemTableImpl(schemaName, tableName, alias string) cartItemTable {
	var (
		IDCartItemColumn        = postgres.IntegerColumn("id_cart_item")
		FkCartColumn            = postgres.IntegerColumn("fk_cart")
		FkExternalVariantColumn = postgres.IntegerColumn("fk_external_variant")
		QuantityColumn          = postgres.IntegerColumn("quantity")
		StatusColumn            = postgres.StringColumn("status")
		allColumns              = postgres.ColumnList{IDCartItemColumn, FkCartColumn, FkExternalVariantColumn, QuantityColumn, StatusColumn}
		mutableColumns          = postgres.ColumnList{FkCartColumn, FkExternalVariantColumn, QuantityColumn, StatusColumn}
	)

	return cartItemTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		IDCartItem:        IDCartItemColumn,
		FkCart:            FkCartColumn,
		FkExternalVariant: FkExternalVariantColumn,
		Quantity:          QuantityColumn,
		Status:            StatusColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
