//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Livestream = newLivestreamTable("public", "livestream", "")

type livestreamTable struct {
	postgres.Table

	// Columns
	IDLivestream postgres.ColumnInteger
	FkShop       postgres.ColumnInteger
	Title        postgres.ColumnString
	Description  postgres.ColumnString
	StartTime    postgres.ColumnTimestamp
	EndTime      postgres.ColumnTimestamp
	CreatedAt    postgres.ColumnTimestamp
	UpdatedAt    postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type LivestreamTable struct {
	livestreamTable

	EXCLUDED livestreamTable
}

// AS creates new LivestreamTable with assigned alias
func (a LivestreamTable) AS(alias string) *LivestreamTable {
	return newLivestreamTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new LivestreamTable with assigned schema name
func (a LivestreamTable) FromSchema(schemaName string) *LivestreamTable {
	return newLivestreamTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new LivestreamTable with assigned table prefix
func (a LivestreamTable) WithPrefix(prefix string) *LivestreamTable {
	return newLivestreamTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new LivestreamTable with assigned table suffix
func (a LivestreamTable) WithSuffix(suffix string) *LivestreamTable {
	return newLivestreamTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newLivestreamTable(schemaName, tableName, alias string) *LivestreamTable {
	return &LivestreamTable{
		livestreamTable: newLivestreamTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newLivestreamTableImpl("", "excluded", ""),
	}
}

func newLivestreamTableImpl(schemaName, tableName, alias string) livestreamTable {
	var (
		IDLivestreamColumn = postgres.IntegerColumn("id_livestream")
		FkShopColumn       = postgres.IntegerColumn("fk_shop")
		TitleColumn        = postgres.StringColumn("title")
		DescriptionColumn  = postgres.StringColumn("description")
		StartTimeColumn    = postgres.TimestampColumn("start_time")
		EndTimeColumn      = postgres.TimestampColumn("end_time")
		CreatedAtColumn    = postgres.TimestampColumn("created_at")
		UpdatedAtColumn    = postgres.TimestampColumn("updated_at")
		allColumns         = postgres.ColumnList{IDLivestreamColumn, FkShopColumn, TitleColumn, DescriptionColumn, StartTimeColumn, EndTimeColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns     = postgres.ColumnList{FkShopColumn, TitleColumn, DescriptionColumn, StartTimeColumn, EndTimeColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return livestreamTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		IDLivestream: IDLivestreamColumn,
		FkShop:       FkShopColumn,
		Title:        TitleColumn,
		Description:  DescriptionColumn,
		StartTime:    StartTimeColumn,
		EndTime:      EndTimeColumn,
		CreatedAt:    CreatedAtColumn,
		UpdatedAt:    UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
