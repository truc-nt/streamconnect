//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ACLRoleUser = newACLRoleUserTable("public", "acl_role_user", "")

type aCLRoleUserTable struct {
	postgres.Table

	// Columns
	IDACLRoleUser postgres.ColumnInteger
	FkACLRole     postgres.ColumnInteger
	FkUser        postgres.ColumnInteger
	FkShop        postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ACLRoleUserTable struct {
	aCLRoleUserTable

	EXCLUDED aCLRoleUserTable
}

// AS creates new ACLRoleUserTable with assigned alias
func (a ACLRoleUserTable) AS(alias string) *ACLRoleUserTable {
	return newACLRoleUserTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ACLRoleUserTable with assigned schema name
func (a ACLRoleUserTable) FromSchema(schemaName string) *ACLRoleUserTable {
	return newACLRoleUserTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ACLRoleUserTable with assigned table prefix
func (a ACLRoleUserTable) WithPrefix(prefix string) *ACLRoleUserTable {
	return newACLRoleUserTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ACLRoleUserTable with assigned table suffix
func (a ACLRoleUserTable) WithSuffix(suffix string) *ACLRoleUserTable {
	return newACLRoleUserTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newACLRoleUserTable(schemaName, tableName, alias string) *ACLRoleUserTable {
	return &ACLRoleUserTable{
		aCLRoleUserTable: newACLRoleUserTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newACLRoleUserTableImpl("", "excluded", ""),
	}
}

func newACLRoleUserTableImpl(schemaName, tableName, alias string) aCLRoleUserTable {
	var (
		IDACLRoleUserColumn = postgres.IntegerColumn("id_acl_role_user")
		FkACLRoleColumn     = postgres.IntegerColumn("fk_acl_role")
		FkUserColumn        = postgres.IntegerColumn("fk_user")
		FkShopColumn        = postgres.IntegerColumn("fk_shop")
		allColumns          = postgres.ColumnList{IDACLRoleUserColumn, FkACLRoleColumn, FkUserColumn, FkShopColumn}
		mutableColumns      = postgres.ColumnList{FkACLRoleColumn, FkUserColumn, FkShopColumn}
	)

	return aCLRoleUserTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		IDACLRoleUser: IDACLRoleUserColumn,
		FkACLRole:     FkACLRoleColumn,
		FkUser:        FkUserColumn,
		FkShop:        FkShopColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
