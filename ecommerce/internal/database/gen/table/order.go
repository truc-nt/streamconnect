//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Order = newOrderTable("public", "order", "")

type orderTable struct {
	postgres.Table

	// Columns
	IDOrder          postgres.ColumnInteger
	FkUser           postgres.ColumnInteger
	FkShop           postgres.ColumnInteger
	FkShippingMethod postgres.ColumnInteger
	FkPaymentMethod  postgres.ColumnInteger
	CreatedAt        postgres.ColumnTimestamp
	UpdatedAt        postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type OrderTable struct {
	orderTable

	EXCLUDED orderTable
}

// AS creates new OrderTable with assigned alias
func (a OrderTable) AS(alias string) *OrderTable {
	return newOrderTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new OrderTable with assigned schema name
func (a OrderTable) FromSchema(schemaName string) *OrderTable {
	return newOrderTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new OrderTable with assigned table prefix
func (a OrderTable) WithPrefix(prefix string) *OrderTable {
	return newOrderTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new OrderTable with assigned table suffix
func (a OrderTable) WithSuffix(suffix string) *OrderTable {
	return newOrderTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newOrderTable(schemaName, tableName, alias string) *OrderTable {
	return &OrderTable{
		orderTable: newOrderTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newOrderTableImpl("", "excluded", ""),
	}
}

func newOrderTableImpl(schemaName, tableName, alias string) orderTable {
	var (
		IDOrderColumn          = postgres.IntegerColumn("id_order")
		FkUserColumn           = postgres.IntegerColumn("fk_user")
		FkShopColumn           = postgres.IntegerColumn("fk_shop")
		FkShippingMethodColumn = postgres.IntegerColumn("fk_shipping_method")
		FkPaymentMethodColumn  = postgres.IntegerColumn("fk_payment_method")
		CreatedAtColumn        = postgres.TimestampColumn("created_at")
		UpdatedAtColumn        = postgres.TimestampColumn("updated_at")
		allColumns             = postgres.ColumnList{IDOrderColumn, FkUserColumn, FkShopColumn, FkShippingMethodColumn, FkPaymentMethodColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns         = postgres.ColumnList{FkUserColumn, FkShopColumn, FkShippingMethodColumn, FkPaymentMethodColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return orderTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		IDOrder:          IDOrderColumn,
		FkUser:           FkUserColumn,
		FkShop:           FkShopColumn,
		FkShippingMethod: FkShippingMethodColumn,
		FkPaymentMethod:  FkPaymentMethodColumn,
		CreatedAt:        CreatedAtColumn,
		UpdatedAt:        UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
