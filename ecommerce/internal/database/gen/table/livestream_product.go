//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var LivestreamProduct = newLivestreamProductTable("public", "livestream_product", "")

type livestreamProductTable struct {
	postgres.Table

	// Columns
	IDLivestreamProduct postgres.ColumnInteger
	FkLivestream        postgres.ColumnInteger
	FkProduct           postgres.ColumnInteger
	Priority            postgres.ColumnInteger
	IsLivestreamed      postgres.ColumnBool

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type LivestreamProductTable struct {
	livestreamProductTable

	EXCLUDED livestreamProductTable
}

// AS creates new LivestreamProductTable with assigned alias
func (a LivestreamProductTable) AS(alias string) *LivestreamProductTable {
	return newLivestreamProductTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new LivestreamProductTable with assigned schema name
func (a LivestreamProductTable) FromSchema(schemaName string) *LivestreamProductTable {
	return newLivestreamProductTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new LivestreamProductTable with assigned table prefix
func (a LivestreamProductTable) WithPrefix(prefix string) *LivestreamProductTable {
	return newLivestreamProductTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new LivestreamProductTable with assigned table suffix
func (a LivestreamProductTable) WithSuffix(suffix string) *LivestreamProductTable {
	return newLivestreamProductTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newLivestreamProductTable(schemaName, tableName, alias string) *LivestreamProductTable {
	return &LivestreamProductTable{
		livestreamProductTable: newLivestreamProductTableImpl(schemaName, tableName, alias),
		EXCLUDED:               newLivestreamProductTableImpl("", "excluded", ""),
	}
}

func newLivestreamProductTableImpl(schemaName, tableName, alias string) livestreamProductTable {
	var (
		IDLivestreamProductColumn = postgres.IntegerColumn("id_livestream_product")
		FkLivestreamColumn        = postgres.IntegerColumn("fk_livestream")
		FkProductColumn           = postgres.IntegerColumn("fk_product")
		PriorityColumn            = postgres.IntegerColumn("priority")
		IsLivestreamedColumn      = postgres.BoolColumn("is_livestreamed")
		allColumns                = postgres.ColumnList{IDLivestreamProductColumn, FkLivestreamColumn, FkProductColumn, PriorityColumn, IsLivestreamedColumn}
		mutableColumns            = postgres.ColumnList{FkLivestreamColumn, FkProductColumn, PriorityColumn, IsLivestreamedColumn}
	)

	return livestreamProductTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		IDLivestreamProduct: IDLivestreamProductColumn,
		FkLivestream:        FkLivestreamColumn,
		FkProduct:           FkProductColumn,
		Priority:            PriorityColumn,
		IsLivestreamed:      IsLivestreamedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
