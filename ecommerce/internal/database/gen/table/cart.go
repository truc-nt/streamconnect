//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Cart = newCartTable("public", "cart", "")

type cartTable struct {
	postgres.Table

	// Columns
	IDCart postgres.ColumnInteger
	FkUser postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CartTable struct {
	cartTable

	EXCLUDED cartTable
}

// AS creates new CartTable with assigned alias
func (a CartTable) AS(alias string) *CartTable {
	return newCartTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CartTable with assigned schema name
func (a CartTable) FromSchema(schemaName string) *CartTable {
	return newCartTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CartTable with assigned table prefix
func (a CartTable) WithPrefix(prefix string) *CartTable {
	return newCartTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CartTable with assigned table suffix
func (a CartTable) WithSuffix(suffix string) *CartTable {
	return newCartTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCartTable(schemaName, tableName, alias string) *CartTable {
	return &CartTable{
		cartTable: newCartTableImpl(schemaName, tableName, alias),
		EXCLUDED:  newCartTableImpl("", "excluded", ""),
	}
}

func newCartTableImpl(schemaName, tableName, alias string) cartTable {
	var (
		IDCartColumn   = postgres.IntegerColumn("id_cart")
		FkUserColumn   = postgres.IntegerColumn("fk_user")
		allColumns     = postgres.ColumnList{IDCartColumn, FkUserColumn}
		mutableColumns = postgres.ColumnList{FkUserColumn}
	)

	return cartTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		IDCart: IDCartColumn,
		FkUser: FkUserColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
