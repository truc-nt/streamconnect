//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Voucher = newVoucherTable("public", "voucher", "")

type voucherTable struct {
	postgres.Table

	// Columns
	IDVoucher   postgres.ColumnInteger
	FkShop      postgres.ColumnInteger
	Code        postgres.ColumnString
	Discount    postgres.ColumnFloat
	MaxDiscount postgres.ColumnFloat
	Method      postgres.ColumnString
	Type        postgres.ColumnString
	Target      postgres.ColumnString
	Quantity    postgres.ColumnInteger
	MinPurchase postgres.ColumnFloat
	StartTime   postgres.ColumnTimestamp
	EndTime     postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type VoucherTable struct {
	voucherTable

	EXCLUDED voucherTable
}

// AS creates new VoucherTable with assigned alias
func (a VoucherTable) AS(alias string) *VoucherTable {
	return newVoucherTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new VoucherTable with assigned schema name
func (a VoucherTable) FromSchema(schemaName string) *VoucherTable {
	return newVoucherTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new VoucherTable with assigned table prefix
func (a VoucherTable) WithPrefix(prefix string) *VoucherTable {
	return newVoucherTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new VoucherTable with assigned table suffix
func (a VoucherTable) WithSuffix(suffix string) *VoucherTable {
	return newVoucherTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newVoucherTable(schemaName, tableName, alias string) *VoucherTable {
	return &VoucherTable{
		voucherTable: newVoucherTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newVoucherTableImpl("", "excluded", ""),
	}
}

func newVoucherTableImpl(schemaName, tableName, alias string) voucherTable {
	var (
		IDVoucherColumn   = postgres.IntegerColumn("id_voucher")
		FkShopColumn      = postgres.IntegerColumn("fk_shop")
		CodeColumn        = postgres.StringColumn("code")
		DiscountColumn    = postgres.FloatColumn("discount")
		MaxDiscountColumn = postgres.FloatColumn("max_discount")
		MethodColumn      = postgres.StringColumn("method")
		TypeColumn        = postgres.StringColumn("type")
		TargetColumn      = postgres.StringColumn("target")
		QuantityColumn    = postgres.IntegerColumn("quantity")
		MinPurchaseColumn = postgres.FloatColumn("min_purchase")
		StartTimeColumn   = postgres.TimestampColumn("start_time")
		EndTimeColumn     = postgres.TimestampColumn("end_time")
		allColumns        = postgres.ColumnList{IDVoucherColumn, FkShopColumn, CodeColumn, DiscountColumn, MaxDiscountColumn, MethodColumn, TypeColumn, TargetColumn, QuantityColumn, MinPurchaseColumn, StartTimeColumn, EndTimeColumn}
		mutableColumns    = postgres.ColumnList{FkShopColumn, CodeColumn, DiscountColumn, MaxDiscountColumn, MethodColumn, TypeColumn, TargetColumn, QuantityColumn, MinPurchaseColumn, StartTimeColumn, EndTimeColumn}
	)

	return voucherTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		IDVoucher:   IDVoucherColumn,
		FkShop:      FkShopColumn,
		Code:        CodeColumn,
		Discount:    DiscountColumn,
		MaxDiscount: MaxDiscountColumn,
		Method:      MethodColumn,
		Type:        TypeColumn,
		Target:      TargetColumn,
		Quantity:    QuantityColumn,
		MinPurchase: MinPurchaseColumn,
		StartTime:   StartTimeColumn,
		EndTime:     EndTimeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
