//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UserAddress = newUserAddressTable("public", "user_address", "")

type userAddressTable struct {
	postgres.Table

	// Columns
	IDUserAddress postgres.ColumnInteger
	FkUser        postgres.ColumnInteger
	Name          postgres.ColumnString
	Phone         postgres.ColumnString
	Address       postgres.ColumnString
	City          postgres.ColumnString
	IsDefault     postgres.ColumnBool

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UserAddressTable struct {
	userAddressTable

	EXCLUDED userAddressTable
}

// AS creates new UserAddressTable with assigned alias
func (a UserAddressTable) AS(alias string) *UserAddressTable {
	return newUserAddressTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserAddressTable with assigned schema name
func (a UserAddressTable) FromSchema(schemaName string) *UserAddressTable {
	return newUserAddressTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserAddressTable with assigned table prefix
func (a UserAddressTable) WithPrefix(prefix string) *UserAddressTable {
	return newUserAddressTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserAddressTable with assigned table suffix
func (a UserAddressTable) WithSuffix(suffix string) *UserAddressTable {
	return newUserAddressTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserAddressTable(schemaName, tableName, alias string) *UserAddressTable {
	return &UserAddressTable{
		userAddressTable: newUserAddressTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newUserAddressTableImpl("", "excluded", ""),
	}
}

func newUserAddressTableImpl(schemaName, tableName, alias string) userAddressTable {
	var (
		IDUserAddressColumn = postgres.IntegerColumn("id_user_address")
		FkUserColumn        = postgres.IntegerColumn("fk_user")
		NameColumn          = postgres.StringColumn("name")
		PhoneColumn         = postgres.StringColumn("phone")
		AddressColumn       = postgres.StringColumn("address")
		CityColumn          = postgres.StringColumn("city")
		IsDefaultColumn     = postgres.BoolColumn("is_default")
		allColumns          = postgres.ColumnList{IDUserAddressColumn, FkUserColumn, NameColumn, PhoneColumn, AddressColumn, CityColumn, IsDefaultColumn}
		mutableColumns      = postgres.ColumnList{FkUserColumn, NameColumn, PhoneColumn, AddressColumn, CityColumn, IsDefaultColumn}
	)

	return userAddressTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		IDUserAddress: IDUserAddressColumn,
		FkUser:        FkUserColumn,
		Name:          NameColumn,
		Phone:         PhoneColumn,
		Address:       AddressColumn,
		City:          CityColumn,
		IsDefault:     IsDefaultColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
