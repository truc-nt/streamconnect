//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ImageVariant = newImageVariantTable("public", "image_variant", "")

type imageVariantTable struct {
	postgres.Table

	// Columns
	IDImageVariant postgres.ColumnInteger
	FkVariant      postgres.ColumnInteger
	URL            postgres.ColumnString
	Status         postgres.ColumnString
	CreatedAt      postgres.ColumnTimestamp
	UpdatedAt      postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ImageVariantTable struct {
	imageVariantTable

	EXCLUDED imageVariantTable
}

// AS creates new ImageVariantTable with assigned alias
func (a ImageVariantTable) AS(alias string) *ImageVariantTable {
	return newImageVariantTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ImageVariantTable with assigned schema name
func (a ImageVariantTable) FromSchema(schemaName string) *ImageVariantTable {
	return newImageVariantTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ImageVariantTable with assigned table prefix
func (a ImageVariantTable) WithPrefix(prefix string) *ImageVariantTable {
	return newImageVariantTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ImageVariantTable with assigned table suffix
func (a ImageVariantTable) WithSuffix(suffix string) *ImageVariantTable {
	return newImageVariantTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newImageVariantTable(schemaName, tableName, alias string) *ImageVariantTable {
	return &ImageVariantTable{
		imageVariantTable: newImageVariantTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newImageVariantTableImpl("", "excluded", ""),
	}
}

func newImageVariantTableImpl(schemaName, tableName, alias string) imageVariantTable {
	var (
		IDImageVariantColumn = postgres.IntegerColumn("id_image_variant")
		FkVariantColumn      = postgres.IntegerColumn("fk_variant")
		URLColumn            = postgres.StringColumn("url")
		StatusColumn         = postgres.StringColumn("status")
		CreatedAtColumn      = postgres.TimestampColumn("created_at")
		UpdatedAtColumn      = postgres.TimestampColumn("updated_at")
		allColumns           = postgres.ColumnList{IDImageVariantColumn, FkVariantColumn, URLColumn, StatusColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns       = postgres.ColumnList{FkVariantColumn, URLColumn, StatusColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return imageVariantTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		IDImageVariant: IDImageVariantColumn,
		FkVariant:      FkVariantColumn,
		URL:            URLColumn,
		Status:         StatusColumn,
		CreatedAt:      CreatedAtColumn,
		UpdatedAt:      UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
