//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Shop = newShopTable("public", "shop", "")

type shopTable struct {
	postgres.Table

	// Columns
	IDShop      postgres.ColumnInteger
	FkUser      postgres.ColumnInteger
	Name        postgres.ColumnString
	Description postgres.ColumnString
	CreatedAt   postgres.ColumnTimestamp
	UpdatedAt   postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ShopTable struct {
	shopTable

	EXCLUDED shopTable
}

// AS creates new ShopTable with assigned alias
func (a ShopTable) AS(alias string) *ShopTable {
	return newShopTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ShopTable with assigned schema name
func (a ShopTable) FromSchema(schemaName string) *ShopTable {
	return newShopTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ShopTable with assigned table prefix
func (a ShopTable) WithPrefix(prefix string) *ShopTable {
	return newShopTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ShopTable with assigned table suffix
func (a ShopTable) WithSuffix(suffix string) *ShopTable {
	return newShopTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newShopTable(schemaName, tableName, alias string) *ShopTable {
	return &ShopTable{
		shopTable: newShopTableImpl(schemaName, tableName, alias),
		EXCLUDED:  newShopTableImpl("", "excluded", ""),
	}
}

func newShopTableImpl(schemaName, tableName, alias string) shopTable {
	var (
		IDShopColumn      = postgres.IntegerColumn("id_shop")
		FkUserColumn      = postgres.IntegerColumn("fk_user")
		NameColumn        = postgres.StringColumn("name")
		DescriptionColumn = postgres.StringColumn("description")
		CreatedAtColumn   = postgres.TimestampColumn("created_at")
		UpdatedAtColumn   = postgres.TimestampColumn("updated_at")
		allColumns        = postgres.ColumnList{IDShopColumn, FkUserColumn, NameColumn, DescriptionColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns    = postgres.ColumnList{FkUserColumn, NameColumn, DescriptionColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return shopTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		IDShop:      IDShopColumn,
		FkUser:      FkUserColumn,
		Name:        NameColumn,
		Description: DescriptionColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
