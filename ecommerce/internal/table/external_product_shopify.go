//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ExternalProductShopify = newExternalProductShopifyTable("public", "external_product_shopify", "")

type externalProductShopifyTable struct {
	postgres.Table

	// Columns
	IDExternalProductShopify postgres.ColumnInteger
	FkExternalShop           postgres.ColumnInteger
	FkProduct                postgres.ColumnInteger
	FkVariant                postgres.ColumnInteger
	ShopifyProductID         postgres.ColumnInteger
	ShopifyVariantID         postgres.ColumnInteger
	Name                     postgres.ColumnString
	Sku                      postgres.ColumnString
	Stock                    postgres.ColumnInteger
	Option                   postgres.ColumnString
	Price                    postgres.ColumnFloat
	ImageURL                 postgres.ColumnString
	CreatedAt                postgres.ColumnTimestamp
	UpdatedAt                postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ExternalProductShopifyTable struct {
	externalProductShopifyTable

	EXCLUDED externalProductShopifyTable
}

// AS creates new ExternalProductShopifyTable with assigned alias
func (a ExternalProductShopifyTable) AS(alias string) *ExternalProductShopifyTable {
	return newExternalProductShopifyTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ExternalProductShopifyTable with assigned schema name
func (a ExternalProductShopifyTable) FromSchema(schemaName string) *ExternalProductShopifyTable {
	return newExternalProductShopifyTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ExternalProductShopifyTable with assigned table prefix
func (a ExternalProductShopifyTable) WithPrefix(prefix string) *ExternalProductShopifyTable {
	return newExternalProductShopifyTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ExternalProductShopifyTable with assigned table suffix
func (a ExternalProductShopifyTable) WithSuffix(suffix string) *ExternalProductShopifyTable {
	return newExternalProductShopifyTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newExternalProductShopifyTable(schemaName, tableName, alias string) *ExternalProductShopifyTable {
	return &ExternalProductShopifyTable{
		externalProductShopifyTable: newExternalProductShopifyTableImpl(schemaName, tableName, alias),
		EXCLUDED:                    newExternalProductShopifyTableImpl("", "excluded", ""),
	}
}

func newExternalProductShopifyTableImpl(schemaName, tableName, alias string) externalProductShopifyTable {
	var (
		IDExternalProductShopifyColumn = postgres.IntegerColumn("id_external_product_shopify")
		FkExternalShopColumn           = postgres.IntegerColumn("fk_external_shop")
		FkProductColumn                = postgres.IntegerColumn("fk_product")
		FkVariantColumn                = postgres.IntegerColumn("fk_variant")
		ShopifyProductIDColumn         = postgres.IntegerColumn("shopify_product_id")
		ShopifyVariantIDColumn         = postgres.IntegerColumn("shopify_variant_id")
		NameColumn                     = postgres.StringColumn("name")
		SkuColumn                      = postgres.StringColumn("sku")
		StockColumn                    = postgres.IntegerColumn("stock")
		OptionColumn                   = postgres.StringColumn("option")
		PriceColumn                    = postgres.FloatColumn("price")
		ImageURLColumn                 = postgres.StringColumn("image_url")
		CreatedAtColumn                = postgres.TimestampColumn("created_at")
		UpdatedAtColumn                = postgres.TimestampColumn("updated_at")
		allColumns                     = postgres.ColumnList{IDExternalProductShopifyColumn, FkExternalShopColumn, FkProductColumn, FkVariantColumn, ShopifyProductIDColumn, ShopifyVariantIDColumn, NameColumn, SkuColumn, StockColumn, OptionColumn, PriceColumn, ImageURLColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns                 = postgres.ColumnList{FkExternalShopColumn, FkProductColumn, FkVariantColumn, ShopifyProductIDColumn, ShopifyVariantIDColumn, NameColumn, SkuColumn, StockColumn, OptionColumn, PriceColumn, ImageURLColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return externalProductShopifyTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		IDExternalProductShopify: IDExternalProductShopifyColumn,
		FkExternalShop:           FkExternalShopColumn,
		FkProduct:                FkProductColumn,
		FkVariant:                FkVariantColumn,
		ShopifyProductID:         ShopifyProductIDColumn,
		ShopifyVariantID:         ShopifyVariantIDColumn,
		Name:                     NameColumn,
		Sku:                      SkuColumn,
		Stock:                    StockColumn,
		Option:                   OptionColumn,
		Price:                    PriceColumn,
		ImageURL:                 ImageURLColumn,
		CreatedAt:                CreatedAtColumn,
		UpdatedAt:                UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
