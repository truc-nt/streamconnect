//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package tables

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ExternalShop = newExternalShopTable("public", "external_shop", "")

type externalShopTable struct {
	postgres.Table

	// Columns
	IDExternalShop postgres.ColumnInteger
	FkShop         postgres.ColumnInteger
	FkEcommerce    postgres.ColumnInteger
	Name           postgres.ColumnString
	Status         postgres.ColumnString
	CreatedAt      postgres.ColumnTimestamp
	UpdatedAt      postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ExternalShopTable struct {
	externalShopTable

	EXCLUDED externalShopTable
}

// AS creates new ExternalShopTable with assigned alias
func (a ExternalShopTable) AS(alias string) *ExternalShopTable {
	return newExternalShopTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ExternalShopTable with assigned schema name
func (a ExternalShopTable) FromSchema(schemaName string) *ExternalShopTable {
	return newExternalShopTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ExternalShopTable with assigned table prefix
func (a ExternalShopTable) WithPrefix(prefix string) *ExternalShopTable {
	return newExternalShopTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ExternalShopTable with assigned table suffix
func (a ExternalShopTable) WithSuffix(suffix string) *ExternalShopTable {
	return newExternalShopTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newExternalShopTable(schemaName, tableName, alias string) *ExternalShopTable {
	return &ExternalShopTable{
		externalShopTable: newExternalShopTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newExternalShopTableImpl("", "excluded", ""),
	}
}

func newExternalShopTableImpl(schemaName, tableName, alias string) externalShopTable {
	var (
		IDExternalShopColumn = postgres.IntegerColumn("id_external_shop")
		FkShopColumn         = postgres.IntegerColumn("fk_shop")
		FkEcommerceColumn    = postgres.IntegerColumn("fk_ecommerce")
		NameColumn           = postgres.StringColumn("name")
		StatusColumn         = postgres.StringColumn("status")
		CreatedAtColumn      = postgres.TimestampColumn("created_at")
		UpdatedAtColumn      = postgres.TimestampColumn("updated_at")
		allColumns           = postgres.ColumnList{IDExternalShopColumn, FkShopColumn, FkEcommerceColumn, NameColumn, StatusColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns       = postgres.ColumnList{FkShopColumn, FkEcommerceColumn, NameColumn, StatusColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return externalShopTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		IDExternalShop: IDExternalShopColumn,
		FkShop:         FkShopColumn,
		FkEcommerce:    FkEcommerceColumn,
		Name:           NameColumn,
		Status:         StatusColumn,
		CreatedAt:      CreatedAtColumn,
		UpdatedAt:      UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
