//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package tables

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UserShopifyAuth = newUserShopifyAuthTable("public", "user_shopify_auth", "")

type userShopifyAuthTable struct {
	postgres.Table

	// Columns
	IDUserShopifyAuth postgres.ColumnInteger
	FkUser            postgres.ColumnInteger
	ShopName          postgres.ColumnString
	ClientID          postgres.ColumnString
	ClientSecret      postgres.ColumnString
	AccessToken       postgres.ColumnString
	CreatedAt         postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UserShopifyAuthTable struct {
	userShopifyAuthTable

	EXCLUDED userShopifyAuthTable
}

// AS creates new UserShopifyAuthTable with assigned alias
func (a UserShopifyAuthTable) AS(alias string) *UserShopifyAuthTable {
	return newUserShopifyAuthTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserShopifyAuthTable with assigned schema name
func (a UserShopifyAuthTable) FromSchema(schemaName string) *UserShopifyAuthTable {
	return newUserShopifyAuthTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserShopifyAuthTable with assigned table prefix
func (a UserShopifyAuthTable) WithPrefix(prefix string) *UserShopifyAuthTable {
	return newUserShopifyAuthTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserShopifyAuthTable with assigned table suffix
func (a UserShopifyAuthTable) WithSuffix(suffix string) *UserShopifyAuthTable {
	return newUserShopifyAuthTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserShopifyAuthTable(schemaName, tableName, alias string) *UserShopifyAuthTable {
	return &UserShopifyAuthTable{
		userShopifyAuthTable: newUserShopifyAuthTableImpl(schemaName, tableName, alias),
		EXCLUDED:             newUserShopifyAuthTableImpl("", "excluded", ""),
	}
}

func newUserShopifyAuthTableImpl(schemaName, tableName, alias string) userShopifyAuthTable {
	var (
		IDUserShopifyAuthColumn = postgres.IntegerColumn("id_user_shopify_auth")
		FkUserColumn            = postgres.IntegerColumn("fk_user")
		ShopNameColumn          = postgres.StringColumn("shop_name")
		ClientIDColumn          = postgres.StringColumn("client_id")
		ClientSecretColumn      = postgres.StringColumn("client_secret")
		AccessTokenColumn       = postgres.StringColumn("access_token")
		CreatedAtColumn         = postgres.TimestampColumn("created_at")
		allColumns              = postgres.ColumnList{IDUserShopifyAuthColumn, FkUserColumn, ShopNameColumn, ClientIDColumn, ClientSecretColumn, AccessTokenColumn, CreatedAtColumn}
		mutableColumns          = postgres.ColumnList{FkUserColumn, ShopNameColumn, ClientIDColumn, ClientSecretColumn, AccessTokenColumn, CreatedAtColumn}
	)

	return userShopifyAuthTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		IDUserShopifyAuth: IDUserShopifyAuthColumn,
		FkUser:            FkUserColumn,
		ShopName:          ShopNameColumn,
		ClientID:          ClientIDColumn,
		ClientSecret:      ClientSecretColumn,
		AccessToken:       AccessTokenColumn,
		CreatedAt:         CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
