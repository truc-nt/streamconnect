//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package tables

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Ecommerce = newEcommerceTable("public", "ecommerce", "")

type ecommerceTable struct {
	postgres.Table

	// Columns
	IDEcommerce postgres.ColumnInteger
	Name        postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type EcommerceTable struct {
	ecommerceTable

	EXCLUDED ecommerceTable
}

// AS creates new EcommerceTable with assigned alias
func (a EcommerceTable) AS(alias string) *EcommerceTable {
	return newEcommerceTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EcommerceTable with assigned schema name
func (a EcommerceTable) FromSchema(schemaName string) *EcommerceTable {
	return newEcommerceTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EcommerceTable with assigned table prefix
func (a EcommerceTable) WithPrefix(prefix string) *EcommerceTable {
	return newEcommerceTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EcommerceTable with assigned table suffix
func (a EcommerceTable) WithSuffix(suffix string) *EcommerceTable {
	return newEcommerceTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEcommerceTable(schemaName, tableName, alias string) *EcommerceTable {
	return &EcommerceTable{
		ecommerceTable: newEcommerceTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newEcommerceTableImpl("", "excluded", ""),
	}
}

func newEcommerceTableImpl(schemaName, tableName, alias string) ecommerceTable {
	var (
		IDEcommerceColumn = postgres.IntegerColumn("id_ecommerce")
		NameColumn        = postgres.StringColumn("name")
		allColumns        = postgres.ColumnList{IDEcommerceColumn, NameColumn}
		mutableColumns    = postgres.ColumnList{NameColumn}
	)

	return ecommerceTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		IDEcommerce: IDEcommerceColumn,
		Name:        NameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
